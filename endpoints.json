{
  "GET /api": {
    "description": "Returns a json representation of all the available endpoints of the api",
    "queries": [],
    "exampleResponse": {
      "endpoints": {
        "GET exampleEndpoint": {
          "Description": "",
          "Queries": [],
          "exampleResponse": {}
        },
        "POST exampleEndpoint": {
          "Description": "",
          "Queries": [],
          "Send": {},
          "exampleResponse": {}
        },
        "PATCH exampleEndpoint": {
          "Description": "",
          "Queries": [],
          "Send": {},
          "exampleResponse": {}
        },
        "DELETE exampleEndpoint": {
          "Description": "",
          "Queries": [],
          "exampleResponse": {}
        }
      }
    }
  },
  "GET /api/topics": {
    "description": "Returns an array of all topics",
    "queries": [],
    "exampleResponse": {
      "topics": [
        { "slug": "mitch", "description": "The man, the Mitch, the legend" },
        { "slug": "cats", "description": "Not dogs" },
        { "slug": "paper", "description": "what books are made of" }
      ]
    }
  },
  "POST /api/topics": {
    "description": "Posts the given topic to the database and responds with the posted topic, topic to be posted has to include slug and description",
    "queries": [],
    "send": {
      "slug": "topic name here",
      "description": "description here"
    },
    "exampleResponse": {
      "topic": {
        "slug": "topic name here",
        "description": "description here"
      }
    }
  },
  "GET /api/topics/:topic_name": {
    "description": "Returns an object of the requested topic by name (a.k.a slug)",
    "queries": [],
    "exampleResponse": {
      "topic": {
        "slug": "mitch",
        "description": "The man, the Mitch, the legend"
      }
    }
  },
  "GET /api/articles": {
    "description": "Returns an array of all articles. Sorted by default in descending order according to the created_at values, most recent articles first",
    "queries": [
      "topic",
      "sort_by: sort articles by any valid key, descending is default",
      "order: takes asc/desc",
      "limit: limits number of articles returned, number of articles per page using p query (if only given limit with no value it defaults to 10)",
      "p: select page when using limit query"
    ],
    "exampleResponse": {
      "articles": [
        {
          "author": "icellusedkars",
          "title": "Sony Vaio; or, The Laptop",
          "article_id": 2,
          "topic": "mitch",
          "created_at": "2020-10-16T05:03:00.000Z",
          "votes": 0,
          "article_img_url": "https://images.pexels.com/photos/158651/news-newsletter-newspaper-information-158651.jpeg?w=700&h=700",
          "comment_count": 0
        },
        {
          "author": "butter_bridge",
          "title": "Moustache",
          "article_id": 12,
          "topic": "mitch",
          "created_at": "2020-10-11T11:24:00.000Z",
          "votes": 0,
          "article_img_url": "https://images.pexels.com/photos/158651/news-newsletter-newspaper-information-158651.jpeg?w=700&h=700",
          "comment_count": 0
        }
      ],
      "total_count": 2
    }
  },
  "POST /api/articles": {
    "description": "Posts the given article to the database and responds with the posted article. The article to be posted has to include author, body, title and topic, can also take a value for article_img_url but not required",
    "queries": [],
    "send": {
      "title": "Living in the shadow of a great man",
      "topic": "mitch",
      "author": "butter_bridge",
      "body": "I find this existence challenging",
      "article_img_url": "https://images.pexels.com/photos/158651/news-newsletter-newspaper-information-158651.jpeg?w=700&h=700"
    },
    "exampleResponse": {
      "article": {
        "article_id": 14,
        "title": "Living in the shadow of a great man",
        "topic": "mitch",
        "author": "butter_bridge",
        "body": "I find this existence challenging",
        "created_at": "2024-02-24T17:36:13.178Z",
        "votes": 0,
        "article_img_url": "https://images.pexels.com/photos/158651/news-newsletter-newspaper-information-158651.jpeg?w=700&h=700",
        "comment_count": 0
      }
    }
  },
  "GET /api/articles/:article_id": {
    "description": "Returns an object of the requested article by id",
    "queries": [],
    "exampleResponse": {
      "article": {
        "article_id": 1,
        "title": "Living in the shadow of a great man",
        "topic": "mitch",
        "author": "butter_bridge",
        "body": "I find this existence challenging",
        "created_at": "2020-07-09T20:11:00.000Z",
        "votes": 100,
        "article_img_url": "https://images.pexels.com/photos/158651/news-newsletter-newspaper-information-158651.jpeg?w=700&h=700",
        "comment_count": 11
      }
    }
  },
  "PATCH /api/articles/:article_id": {
    "description": "Updates the given article with an increase or decrease in votes, according to the given object { inc_votes: newVote }, where newVote represents how much the votes property should be updated by. Returns updated article",
    "queries": [],
    "send": { "inc_votes": 1 },
    "exampleResponse": {
      "article": {
        "article_id": 1,
        "title": "Living in the shadow of a great man",
        "topic": "mitch",
        "author": "butter_bridge",
        "body": "I find this existence challenging",
        "created_at": "2020-07-09T20:11:00.000Z",
        "votes": 101,
        "article_img_url": "https://images.pexels.com/photos/158651/news-newsletter-newspaper-information-158651.jpeg?w=700&h=700"
      }
    }
  },
  "DELETE /api/articles/:article_id": {
    "description": "Deletes the article by the given id from the database and its respective comments, does not return a response",
    "queries": [],
    "exampleResponse": {}
  },
  "GET /api/articles/:article_id/comments": {
    "description": "Returns all comments of a given article by id. Sorted by default in descending order according to the created_at values, most recent comments first",
    "queries": [
      "limit: limits number of comments returned, number of comments per page using p query",
      "p: select page when using limit query"
    ],
    "exampleResponse": {
      "comments": [
        {
          "comment_id": 5,
          "body": "I hate streaming noses",
          "article_id": 1,
          "author": "icellusedkars",
          "votes": 0,
          "created_at": "2020-11-03T21:00:00.000Z"
        },
        {
          "comment_id": 2,
          "body": "The beautiful thing about treasure is that it exists. Got to find out what kind of sheets these are; not cotton, not rayon, silky.",
          "article_id": 1,
          "author": "butter_bridge",
          "votes": 14,
          "created_at": "2020-10-31T03:03:00.000Z"
        }
      ]
    }
  },
  "POST /api/articles/:article_id/comments": {
    "description": "Posts the given comment to the database and responds with the posted comment, comment to be posted has to include a username and body, where the username belongs to a registered user",
    "queries": [],
    "send": {
      "body": "post new comment test",
      "username": "butter_bridge"
    },
    "exampleResponse": {
      "comment": {
        "comment_id": 19,
        "body": "post new comment test",
        "article_id": 1,
        "author": "butter_bridge",
        "votes": 0,
        "created_at": "2024-02-24T17:51:48.464Z"
      }
    }
  },
  "DELETE /api/comments/:comment_id": {
    "description": "Deletes the comment by the given id from the database, does not return a response",
    "queries": [],
    "exampleResponse": { "none": "none" }
  },
  "PATCH /api/comments/:comment_id": {
    "description": "Updates the given comment with an increase or decrease in votes, according to the given object { inc_votes: newVote }, where newVote represents how much the votes property should be updated by. Returns the updated comment",
    "queries": [],
    "send": { "inc_votes": 1 },
    "exampleResponse": {
      "comment": {
        "comment_id": 1,
        "body": "Oh, I've got compassion running out of my nose, pal! I'm the Sultan of Sentiment!",
        "article_id": 9,
        "author": "butter_bridge",
        "votes": 17,
        "created_at": "2020-04-06T12:17:00.000Z"
      }
    }
  },
  "GET /api/users": {
    "description": "Returns an array of all users",
    "queries": [],
    "exampleResponse": {
      "users": [
        {
          "username": "butter_bridge",
          "name": "jonny",
          "avatar_url": "https://www.healthytherapies.com/wp-content/uploads/2016/06/Lime3.jpg"
        },
        {
          "username": "icellusedkars",
          "name": "sam",
          "avatar_url": "https://avatars2.githubusercontent.com/u/24604688?s=460&v=4"
        }
      ]
    }
  },
  "GET /api/users/:username": {
    "description": "Returns an object of the requested user by username",
    "queries": [],
    "exampleResponse": {
      "user": {
        "username": "butter_bridge",
        "name": "jonny",
        "avatar_url": "https://www.healthytherapies.com/wp-content/uploads/2016/06/Lime3.jpg"
      }
    }
  }
}
